name: "Build and Test"
on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        default: 'ubuntu-latest'
        required: false
      # Init script that should be executed right after checkout.
      init-script:
        type: string
        required: false
      # Do not fail on audit warnings only of critical errors
      audit-allow-warnings:
        type: boolean
        required: false
      enable-target-cache:
        type: boolean
        required: false
      disable-cache:
        type: boolean
        required: false
      git-fetch-depth:
        type: string
        required: false

env:
  CARGO_TERM_COLOR: always

jobs:
  assemble-rs:
    runs-on: ${{ inputs.runs-on }}

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: ${{ inputs.git-fetch-depth }}

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          targets: wasm32-unknown-unknown, i686-unknown-linux-gnu

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          cache: false

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: setup environment
        run: |
          export RUST_BACKTRACE="full"
          cargo install ic-wasm
          cargo install icx-proxy
          sudo apt update
          sudo apt install gcc-multilib libunwind-dev

      - name: Install Protobuf compiler
        uses: arduino/setup-protoc@v3

      - name: Reconfigure git save.directory
        run: |
          git config --global --add safe.directory /__w/${GITHUB_REPOSITORY#*/}/${GITHUB_REPOSITORY#*/}

      - name: "Init script"
        if: ${{ inputs.init-script }}
        run: ${{ inputs.init-script }}

      - name: Checking for a test tag
        id: tag
        run: |
          TT=""
          if [ "$GITHUB_REF_TYPE" = "tag" ] && [ "${GITHUB_REF_NAME%-test}" != "$GITHUB_REF_NAME" ]; then TT="true"; fi
          echo "test=$TT" >> $GITHUB_OUTPUT

      - name: Configure Rust Cache
        uses: Swatinem/rust-cache@v2
        if: ${{ ! inputs.disable-cache }}
        with:
          shared-key: ${{ github.repository }}
          cache-targets:  ${{ inputs.enable-target-cache }}
          save-if: ${{ github.ref_type != 'tag' }}

      - name: "Audit prepare config, adding ignores from file ./AUDIT_IGNORE if any"
        if: ${{ ! steps.tag.outputs.test }}
        id: audit
        run: |
          AUDIT_IGNORE=$(cat AUDIT_IGNORE  2>/dev/null | grep RUSTSEC | awk '$0="--ignore "$0' ORS=" ")
          echo "ignore=$AUDIT_IGNORE" >> $GITHUB_OUTPUT
          echo "w=$(if [ "${{ inputs.audit-allow-warnings }}" = "true" ]; then echo ""; else echo " -D warnings "; fi)" >> $GITHUB_OUTPUT

      - name: "Audit"
        if: ${{ ! steps.tag.outputs.test }}
        uses: actions-rs/cargo@v1
        with:
          command: audit
          args: ${{ steps.audit.outputs.w }} ${{ steps.audit.outputs.ignore }}
          
      - name: "Checking code format"
        if: ${{ ! steps.tag.outputs.test }}
        run: cargo fmt --all --check

      - name: "Checking code style"
        if: ${{ ! inputs.rs-skip-clippy && ! steps.tag.outputs.test}} 
        run: cargo clippy --all-features --all-targets -- -D warnings
